AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: REST API for the Bridge Syndicate Backend with Rabbit VPC
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: AWS_IAM
  AuthGamePost:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBReadPolicy:
            TableName: syndicate_production_users
        - DynamoDBWritePolicy:
            TableName: syndicate_production_games
        - SQSSendMessagePolicy:
            QueueName: syndicate_production_games
      Handler: lambda/auth/game/post.auth_game_post_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/game
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
  AuthGameContainerMetadataPut:
    Type: AWS::Serverless::Function
    Properties:
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue
            'SyndicateVPCAndBroker-RabbitIngressSecurityGroupId'
          - !ImportValue
            'SyndicateVPCAndBroker-HTTPIngressSecurityGroupId'
        SubnetIds:
          - !ImportValue
            'SyndicateVPCAndBroker-SubnetLambdaId'
      Environment:
        Variables:
          SYNDICATE_ENV: production
          RABBIT_URI: !ImportValue
            'SyndicateVPCAndBroker-AmqpEndpoint'
      Policies:
        - DynamoDBWritePolicy:
            TableName: syndicate_production_games
      Handler: lambda/auth/game/container_metadata/put.auth_game_container_metadata_put_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/game/container_metadata
            Method: PUT
            RestApiId:
              Ref: ApiGatewayApi
  AuthGamePut:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBWritePolicy:
            TableName: syndicate_production_games
        - SQSSendMessagePolicy:
            QueueName: syndicate_production_delayed_warps
      Handler: lambda/auth/game/put.auth_game_put_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/game
            Method: PUT
            RestApiId:
              Ref: ApiGatewayApi
  AuthUserByMinecraftUuidGet:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBReadPolicy:
            TableName: syndicate_production_users
        - DynamoDBWritePolicy:
            TableName: syndicate_production_kick_codes
      Handler: lambda/auth/user/by-minecraft-uuid/get.auth_user_by_minecraft_uuid_get_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/user/by-minecraft-uuid/{proxy+}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  AuthUserByDiscordIdGet:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBReadPolicy:
            TableName: syndicate_production_users
      Handler: lambda/auth/user/by-discord-id/get.auth_user_by_discord_id_get_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/user/by-discord-id/{proxy+}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  AuthRegisterByKickCodePost:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBWritePolicy:
            TableName: syndicate_production_kick_codes
        - DynamoDBWritePolicy:
            TableName: syndicate_production_users
      Handler: lambda/auth/register/by-kick-code/post.auth_register_by_kick_code_post_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/register/by-kick-code/{proxy+}
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
  AuthGameAcceptPost:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBWritePolicy:
            TableName: syndicate_production_games
        - SQSSendMessagePolicy:
            QueueName: syndicate_production_games
      Handler: lambda/auth/game/accept/post.auth_game_accept_post_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/game/accept/{proxy+}
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
  DelayedWarp:
    Type: AWS::Serverless::Function
    Properties:
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue
            'SyndicateVPCAndBroker-RabbitIngressSecurityGroupId'
          - !ImportValue
            'SyndicateVPCAndBroker-HTTPIngressSecurityGroupId'
        SubnetIds:
          - !ImportValue
            'SyndicateVPCAndBroker-SubnetLambdaId'
      Environment:
        Variables:
          SYNDICATE_ENV: production
          RABBIT_URI: !ImportValue
            'SyndicateVPCAndBroker-AmqpEndpoint'
      Handler: lambda/via-sqs/warp.handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: arn:aws:sqs:us-west-2:595508394202:syndicate_production_delayed_warps
            BatchSize: 1
            Enabled: true
  DynamoDBProcessGameStreamFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
          POSTGRES_HOST: !ImportValue
            'SyndicateVPCAndBroker-RDSEndpoint'
      Handler: lambda/via-stream/games.handler
      Runtime: ruby2.7
      CodeUri: ./
      Policies:
        - SQSSendMessagePolicy:
            QueueName: syndicate_production_player_messages
        - DynamoDBWritePolicy:
            TableName: syndicate_production_users
      Events:
        MyDynamoDBtable:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt DynamoDBProductionGamesTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
  DynamoDBProductionGamesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: syndicate_production_games
      KeySchema:
        - AttributeName: game_uuid
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: game_uuid
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      Layers:
        - !Ref LayerPGLib
  LayerPGLib:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: libpqSo5dot5
      ContentUri: 's3://S3Bucket: syndicate-lambda-layers/2021-10-10-01-lib-pg-layer.zip'
