AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: REST API for the Bridge Syndicate Backend
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: AWS_IAM
  AuthGamePost:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBWritePolicy:
            TableName: syndicate_production_games
        - SQSSendMessagePolicy:
            QueueName: syndicate_production_games
      Handler: lambda/auth/game/post.auth_game_post_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/game
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
  AuthGameContainerMetadataPut:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
          RABBIT_HOST: $some thing here
      Policies:
        - DynamoDBWritePolicy:
            TableName: syndicate_production_games
        - Statement:
            - Sid: inlinePolicyAuthGameContainerMetadataPutSqsAll
              Effect: Allow
              Action:
                - sqs:*
              Resource: 'arn:aws:sqs:us-west-2:595508394202:syndicate_production_player_messages'
            - Sid: inlinePolicyAuthGameContainerMetadataPutSqsList
              Effect: Allow
              Action:
                - sqs:ListQueues
              Resource: '*'
        - Statement:
            - Sid: inlinePolicyAuthGameContainerMetadataPutEc2
              Effect: Allow
              Action:
                - ec2:DescribeNetworkInterfaces
              Resource: '*'
        - Statement:
            - Sid: inlinePolicyAuthGameContainerMetadataPutEcs
              Effect: Allow
              Action:
                - ecs:DescribeTasks
              Resource: '*'
      Handler: lambda/auth/game/container_metadata/put.auth_game_container_metadata_put_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/game/container_metadata
            Method: PUT
            RestApiId:
              Ref: ApiGatewayApi
  AuthGamePut:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBWritePolicy:
            TableName: syndicate_production_games
        - SQSSendMessagePolicy:
            QueueName: syndicate_production_games
      Handler: lambda/auth/game/put.auth_game_put_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/game
            Method: PUT
            RestApiId:
              Ref: ApiGatewayApi
  AuthUserByMinecraftUuidGet:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBReadPolicy:
            TableName: syndicate_production_users
        - DynamoDBWritePolicy:
            TableName: syndicate_production_kick_codes
      Handler: lambda/auth/user/by-minecraft-uuid/get.auth_user_by_minecraft_uuid_get_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/user/by-minecraft-uuid/{proxy+}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  AuthRegisterByKickCodePost:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBReadPolicy:
            TableName: syndicate_production_kick_codes
        - DynamoDBWritePolicy:
            TableName: syndicate_production_users
      Handler: lambda/auth/register/by-kick-code/post.auth_register_by_kick_code_post_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/register/by-kick-code/{proxy+}
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
  AuthGameAcceptPost:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          SYNDICATE_ENV: production
      Policies:
        - DynamoDBWritePolicy:
            TableName: syndicate_production_games
        - SQSSendMessagePolicy:
            QueueName: syndicate_production_games
      Handler: lambda/auth/game/accept/post.auth_game_accept_post_handler
      Runtime: ruby2.7
      CodeUri: ./
      Events:
        SyndicateAPI:
          Type: Api
          Properties:
            Path: /auth/game/accept/{proxy+}
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi
